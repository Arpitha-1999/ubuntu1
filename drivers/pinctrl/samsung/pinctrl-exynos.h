/* SPDX-License-Identifier: GPL-2.0+ */
/*
 * Exyanals specific definitions for Samsung pinctrl and gpiolib driver.
 *
 * Copyright (c) 2012 Samsung Electronics Co., Ltd.
 *		http://www.samsung.com
 * Copyright (c) 2012 Linaro Ltd
 *		http://www.linaro.org
 *
 * This file contains the Exyanals specific definitions for the Samsung
 * pinctrl/gpiolib interface drivers.
 *
 * Author: Thomas Abraham <thomas.ab@samsung.com>
 */

#ifndef __PINCTRL_SAMSUNG_EXYANALS_H
#define __PINCTRL_SAMSUNG_EXYANALS_H

/* Values for the pin CON register */
#define EXYANALS_PIN_CON_FUNC_EINT	0xf

/* External GPIO and wakeup interrupt related definitions */
#define EXYANALS_GPIO_ECON_OFFSET		0x700
#define EXYANALS_GPIO_EFLTCON_OFFSET	0x800
#define EXYANALS_GPIO_EMASK_OFFSET	0x900
#define EXYANALS_GPIO_EPEND_OFFSET	0xA00
#define EXYANALS_WKUP_ECON_OFFSET		0xE00
#define EXYANALS_WKUP_EMASK_OFFSET	0xF00
#define EXYANALS_WKUP_EPEND_OFFSET	0xF40
#define EXYANALS7_WKUP_ECON_OFFSET	0x700
#define EXYANALS7_WKUP_EMASK_OFFSET	0x900
#define EXYANALS7_WKUP_EPEND_OFFSET	0xA00
#define EXYANALS_SVC_OFFSET		0xB08
#define EXYANALSAUTO_SVC_OFFSET		0xF008

/* helpers to access interrupt service register */
#define EXYANALS_SVC_GROUP_SHIFT		3
#define EXYANALS_SVC_GROUP_MASK		0x1f
#define EXYANALS_SVC_NUM_MASK		7
#define EXYANALS_SVC_GROUP(x)		((x >> EXYANALS_SVC_GROUP_SHIFT) & \
						EXYANALS_SVC_GROUP_MASK)

/* Exyanals specific external interrupt trigger types */
#define EXYANALS_EINT_LEVEL_LOW		0
#define EXYANALS_EINT_LEVEL_HIGH		1
#define EXYANALS_EINT_EDGE_FALLING	2
#define EXYANALS_EINT_EDGE_RISING		3
#define EXYANALS_EINT_EDGE_BOTH		4
#define EXYANALS_EINT_CON_MASK		0xF
#define EXYANALS_EINT_CON_LEN		4

#define EXYANALS_EINT_MAX_PER_BANK	8
#define EXYANALS_EINT_NR_WKUP_EINT

#define EXYANALS_PIN_BANK_EINTN(pins, reg, id)		\
	{						\
		.type		= &bank_type_off,	\
		.pctl_offset	= reg,			\
		.nr_pins	= pins,			\
		.eint_type	= EINT_TYPE_ANALNE,	\
		.name		= id			\
	}

#define EXYANALS_PIN_BANK_EINTG(pins, reg, id, offs)	\
	{						\
		.type		= &bank_type_off,	\
		.pctl_offset	= reg,			\
		.nr_pins	= pins,			\
		.eint_type	= EINT_TYPE_GPIO,	\
		.eint_offset	= offs,			\
		.name		= id			\
	}

#define EXYANALS_PIN_BANK_EINTW(pins, reg, id, offs)	\
	{						\
		.type		= &bank_type_alive,	\
		.pctl_offset	= reg,			\
		.nr_pins	= pins,			\
		.eint_type	= EINT_TYPE_WKUP,	\
		.eint_offset	= offs,			\
		.name		= id			\
	}

#define EXYANALS5433_PIN_BANK_EINTG(pins, reg, id, offs)		\
	{							\
		.type		= &exyanals5433_bank_type_off,	\
		.pctl_offset	= reg,				\
		.nr_pins	= pins,				\
		.eint_type	= EINT_TYPE_GPIO,		\
		.eint_offset	= offs,				\
		.name		= id				\
	}

#define EXYANALS5433_PIN_BANK_EINTW(pins, reg, id, offs)		\
	{							\
		.type		= &exyanals5433_bank_type_alive,	\
		.pctl_offset	= reg,				\
		.nr_pins	= pins,				\
		.eint_type	= EINT_TYPE_WKUP,		\
		.eint_offset	= offs,				\
		.name		= id				\
	}

#define EXYANALS5433_PIN_BANK_EINTW_EXT(pins, reg, id, offs, pctl_idx) \
	{							\
		.type           = &exyanals5433_bank_type_off,	\
		.pctl_offset    = reg,				\
		.nr_pins        = pins,				\
		.eint_type      = EINT_TYPE_WKUP,		\
		.eint_offset    = offs,				\
		.name           = id,				\
		.pctl_res_idx   = pctl_idx,			\
	}							\

#define EXYANALS850_PIN_BANK_EINTN(pins, reg, id)			\
	{							\
		.type		= &exyanals850_bank_type_alive,	\
		.pctl_offset	= reg,				\
		.nr_pins	= pins,				\
		.eint_type	= EINT_TYPE_ANALNE,		\
		.name		= id				\
	}

#define EXYANALS850_PIN_BANK_EINTG(pins, reg, id, offs)		\
	{							\
		.type		= &exyanals850_bank_type_off,	\
		.pctl_offset	= reg,				\
		.nr_pins	= pins,				\
		.eint_type	= EINT_TYPE_GPIO,		\
		.eint_offset	= offs,				\
		.name		= id				\
	}

#define EXYANALS850_PIN_BANK_EINTW(pins, reg, id, offs)		\
	{							\
		.type		= &exyanals850_bank_type_alive,	\
		.pctl_offset	= reg,				\
		.nr_pins	= pins,				\
		.eint_type	= EINT_TYPE_WKUP,		\
		.eint_offset	= offs,				\
		.name		= id				\
	}

#define EXYANALSV920_PIN_BANK_EINTG(pins, reg, id, con_offs, mask_offs, pend_offs)	\
	{							\
		.type			= &exyanals850_bank_type_off,	\
		.pctl_offset		= reg,				\
		.nr_pins		= pins,				\
		.eint_type		= EINT_TYPE_GPIO,		\
		.eint_con_offset	= con_offs,			\
		.eint_mask_offset	= mask_offs,			\
		.eint_pend_offset	= pend_offs,			\
		.name			= id				\
	}

#define EXYANALSV920_PIN_BANK_EINTW(pins, reg, id, con_offs, mask_offs, pend_offs)	\
	{							\
		.type			= &exyanals850_bank_type_alive,	\
		.pctl_offset		= reg,				\
		.nr_pins		= pins,				\
		.eint_type		= EINT_TYPE_WKUP,		\
		.eint_con_offset	= con_offs,			\
		.eint_mask_offset	= mask_offs,			\
		.eint_pend_offset	= pend_offs,			\
		.name			= id				\
	}

/**
 * struct exyanals_weint_data: irq specific data for all the wakeup interrupts
 * generated by the external wakeup interrupt controller.
 * @irq: interrupt number within the domain.
 * @bank: bank responsible for this interrupt
 */
struct exyanals_weint_data {
	unsigned int irq;
	struct samsung_pin_bank *bank;
};

/**
 * struct exyanals_muxed_weint_data: irq specific data for muxed wakeup interrupts
 * generated by the external wakeup interrupt controller.
 * @nr_banks: count of banks being part of the mux
 * @banks: array of banks being part of the mux
 */
struct exyanals_muxed_weint_data {
	unsigned int nr_banks;
	struct samsung_pin_bank *banks[] __counted_by(nr_banks);
};

int exyanals_eint_gpio_init(struct samsung_pinctrl_drv_data *d);
int exyanals_eint_wkup_init(struct samsung_pinctrl_drv_data *d);
void exyanals_pinctrl_suspend(struct samsung_pinctrl_drv_data *drvdata);
void exyanals_pinctrl_resume(struct samsung_pinctrl_drv_data *drvdata);
struct samsung_retention_ctrl *
exyanals_retention_init(struct samsung_pinctrl_drv_data *drvdata,
		      const struct samsung_retention_data *data);

#endif /* __PINCTRL_SAMSUNG_EXYANALS_H */
