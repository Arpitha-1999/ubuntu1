/*
 *  Copyright (C) 2012 Altera Corporation <www.altera.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/ {
	#address-cells = <1>;
	#size-cells = <1>;

	hps_0_bridges: bridge@0xc0000000 {
		compatible = "altr,bridge-14.1", "simple-bus";
		reg = <0xc0000000 0x20000000>,
			<0xff200000 0x00200000>;
		reg-names = "axi_h2f", "axi_h2f_lw";
		#address-cells = <2>;
		#size-cells = <1>;
		ranges = <0x00000000 0x00000000 0xc0000000 0x00010000>,
			<0x00000001 0x00002000 0xff202000 0x00000010>,
			<0x00000001 0x00003000 0xff203000 0x00000010>;

		pio_0: gpio@0x100000000 {
			status = "okay";

			compatible = "altr,pio-14.1", "altr,pio-1.0";
			reg = <0x00000001 0x00002000 0x00000010>;
			altr,gpio-bank-width = <32>;	/* embeddedsw.dts.params.altr,gpio-bank-width type NUMBER */
			resetvalue = <0>;	/* embeddedsw.dts.params.resetvalue type NUMBER */
			#gpio-cells = <2>;
			gpio-controller;
		}; //end gpio@0x100000000 (pio_0)
		
		acl_iface_button_pio: gpio@0x100003000 {
			compatible = "altr,pio-15.0", "altr,pio-1.0";
			reg = <0x00000001 0x00003000 0x00000010>;
			interrupt-parent = <&intc>;
			interrupts = <0 41 1>;
			altr,gpio-bank-width = <2>;	/* embeddedsw.dts.params.altr,gpio-bank-width type NUMBER */
			altr,interrupt_type = <2>;	/* embeddedsw.dts.params.altr,interrupt_type type NUMBER */
			edge_type = <1>;	/* embeddedsw.dts.params.edge_type type NUMBER */
			level_trigger = <0>;	/* embeddedsw.dts.params.level_trigger type NUMBER */
			resetvalue = <0>;	/* embeddedsw.dts.params.resetvalue type NUMBER */
			#gpio-cells = <2>;
			gpio-controller;
		}; //end gpio@0x100003000 (acl_iface_button_pio)
	}; //end bridge@0xc0000000 (hps_0_bridges)

	/*
	//doesn't seem to work with gpio driver.  using polled instead.
	gpio_keys {
		compatible = "gpio-keys";
		#address-cells = <1>;
		#size-cells = <0>;
		autorepeat;
		button@21 {
			label = "h key";
			linux,code = <35>;
			gpios = <&acl_iface_button_pio 0 1>;
			gpio-key,wakeup;
			autorepeat;
		};
	};*/
	
	gpio_keys_polled {
		compatible = "gpio-keys-polled";
		#address-cells = <1>;
		#size-cells = <0>;
		poll-interval = <100>;
		//autorepeat;
		button@21 {
			label = "h key";
			linux,code = <35>;
			gpios = <&acl_iface_button_pio 0 1>;
		};
		button@22 {
			label = "h key";
			linux,code = <35>;
			gpios = <&acl_iface_button_pio 1 1>;
		};
		/*button@22 {
			label = "r key";
			linux,code = <19>;
			gpios = <&acl_iface_button_pio 1 1>;
		};*/
	};
};

&spi0 {
/*	compatible = "snps,dw-spi-mmio";
	#address-cells = <1>;
	#size-cells = <0>;
	reg = <0xfff00000 0x1000>;
	interrupts = <0 154 4>;
	num-chipselect = <4>;
	bus-num = <0>;
	tx-dma-channel = <&pdma 16>;
	rx-dma-channel = <&pdma 17>;
	clocks = <&per_base_clk>;*/
	
	pitft: pitft@0{
		compatible = "ilitek,ili9341";
		reg = <0>;
		pinctrl-names = "default";
		dc-gpios = <&pio_0 0 1>;
		spi-max-frequency = <16000000>;
		map = <1>;
		font = "VGA8x16";
		rotate = <270>;
		fps = <25>;
		bgr;
		buswidth = <8>;
		debug = <0>;
	};

	/* TODO: crauer - what is this for? */
	stmpe610: stmpe161@1 {
		spi-max-frequency = <1000000>;
		compatible = "st,stmpe610";
		reg = <1>;
		stmpe_touchscreen {
			compatible = "st,stmpe-ts";
			};
	};
};